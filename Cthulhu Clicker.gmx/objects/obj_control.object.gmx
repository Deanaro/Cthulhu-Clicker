<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_control</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT Game Parameters
drag_distance = 300; //x distance before swipe is considered to be effective
depth = -10;
chest_spawn_min = 600; //10 sec
chest_spawn_max = 660; //11 sec
water_overlay = 0.4; //between 0 and 1, affect overlay tinge

//Economy Parameters
cost_increase_rate = 1.02; //multiplier affecting rate items increase in cost
cost_dps_multi = 300; // Cost vs DPS relationship [Cost Divided by cost_dps_multi * (Item Multiplier ^ item_level) = DPS]

//Visual Parameters
fnt_main = fnt_arial; //set the game main font
draw_set_font(fnt_main);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resolution Management

            width = 620;
            height = 800;
            
//get os and get screen resolution
switch (os_type)
    {
    case os_windows: var screen_height = height; var screen_width = width; break;
    case os_android: var screen_height = display_get_height(); var screen_width = display_get_width(); break;
    case os_linux: var screen_height = height; var screen_width = width; break;
    case os_macosx: var screen_height = height; var screen_width = width; break;
    case os_ios: var screen_height = display_get_height(); var screen_width = display_get_width(); break;
    case os_winphone: var screen_height = display_get_height(); var screen_width = display_get_width(); break;
    case os_unknown: var screen_height = height; var screen_width = width; break;
    }
window_set_position(32, 32);

/*  DONT CHANGE    */
surface_resize(application_surface,screen_width,screen_height); //resizes the surface to the resolution
window_set_size(screen_width,screen_height); //resizes the window to the resolution
view_wview = screen_width;  //resizes the view to the resolution
view_hview = screen_height;

/*  Useful Variables */
zoom = round(view_wview/(32 * 7)); //sets the zoom factor so that the button fits roughly 4 times in the room's width.
display_center = view_hview/2; //the y coordinate at which the botton of the city image starts
display_right = view_wview; //the y coordinate of window right side
//create instances in porportion to the view
clickerID = instance_create((view_wview/2) - (sprite_get_width(spr_clicker)/2)*zoom,view_hview*3/4 - (sprite_get_height(spr_clicker)/2)*zoom,obj_clicker);//creates the clicker object, 3/4 down and 1/2 across

//Set font size 
global.font_size = ceil(zoom/4)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT Game Variables
click_damage = 1;
DPS = 0;
population = 7000000000;
afflicted = 0;
insanity = 0;
global.DPS = 0;

//View Variables
viewnum = 0;
index_minView = -1; //The lowest numbered View
index_maxView = 2; //The highest numbered View

/* View index numbers */
stats_view = 2;
shop_view = 1;
menu_view = -1;

scr_viewupdate();

//Draw Variables
bOffset = 10; //border offset for draw position calculations
tOffset = 4; //text border offset for text y buffer
view_wmiddle = view_wview/2; //width middle
view_hmiddle = view_hview/2; //height middle
view_ui_middle = view_hmiddle + view_hmiddle/2; //verticle middle of UI area

//Calculation Variables - Save memory allocations each step by pre-allocating! - Harry
ui_population = "";
ui_afflicted = "";
ui_insanity = "";
ui_dps = "";
ui_entityWidth = 0;
ui_entityHeight = 0;

ui_click_start = 0;
ui_click_drag = 0;

//HUD draw precalcs
view_count = abs(index_minView) + abs(index_maxView) + 1; //add together negative, zero and positive indexed views
dot_plus_offset_width = sprite_get_width(spr_dot) + bOffset;
all_dots_width = (view_count*dot_plus_offset_width-bOffset);
dots_pos_start = (view_wview-all_dots_width)/2;

//Arrows [to remove]
ui_arrow_width = sprite_get_width(spr_arrow);
ui_arrow_height = sprite_get_height(spr_arrow);
ui_arrow_right_xpos = view_wview - ui_arrow_width - bOffset;
ui_arrow_left_xpos = bOffset;
ui_arrow_ypos = view_hmiddle + (ui_arrow_height/2);
ui_arrow_top = ui_arrow_ypos-(ui_arrow_height/2);
ui_arrow_bottom = ui_arrow_ypos+(ui_arrow_height/2);

// play bg music --------------- lachlan
audio_play_sound(snd_placeholder_music, 10, true);
audio_sound_gain(snd_placeholder_music, 0.1, 0);

//DPS cycle
alarm[0] = 1;

//chest spawn timer - lachlan
alarm[5] = irandom_range(chest_spawn_min,chest_spawn_max);

//buff variables -lachlan
buff_amount = 0;
buff_time = 0;
buff_timer_pass_count = 0;

/*font test - TO REMOVE -HM
fnt_test = fnt_arial;
//fnt_test = font_add_sprite_ext(spr_fonttest,"0123456789",false,0);
draw_set_font(fnt_main);
draw_set_color(c_white);
global.font_size = ceil(zoom/4) */


//create statistics array - lachlan
scr_create_stats_array();
//when no save file exists this time will be kept, it is used to check total play time. it is also used in total avtive playtime calculations. - lachlan
date_set_timezone(timezone_utc);
local_time = date_current_datetime();
stats_array[7,1] = local_time;

//create global variable for tracking hightest dps achived
global.highest_dps = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT Control Objects

//create store control object
instance_create(view_wview,y+view_hview/2,obj_store_control);
instance_create(0,0,obj_menu_control);
instance_create(view_wview * 2,y+view_hview/2,obj_stats_control);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>60</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>150</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>3600</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>3</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///conduct dps buff timing
//lachlan

//work out if it is the first pass through
if (buff_timer_pass_count = 0)
    {
    //calculate dps buff using passed buff amount and apply it
    DPS = buff_amount * DPS;
    
    //convert buff time to seconds
    buff_time = buff_time * room_speed;
    
    //reset timer for buff piriod
    alarm[6] = buff_time;
    
    //add to pass count
    buff_timer_pass_count = 1;
    }
//this will activate after the buff has been running for its pre determined time
else
    {
    //remove buff
    DPS = DPS / buff_amount;
    
    //stop timer
    alarm[6] = -1;
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create chest and reset timer
instance_create(0,0,obj_chest);
alarm[5] = irandom_range(chest_spawn_min,chest_spawn_max);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///when game is unpaused restart

//lachlan
game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reattempt server connection
// lachlan

if (global.server_connection = 0) //check server connection has not been made
    {
    scr_get_server_time(); //attempt to connect to server
    alarm[3] = 3600; //every 1 minutes retry
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///server time keeper

//every 60 steps add 1 second to server date time ------------------ Lachlan
global.server_datetime = global.server_datetime + 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>60</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///statistics checks 
//- lachlan

//if current afflicted is higher then previous max afflicted replace it.
current_max_afflicted = real(stats_array[6,1])
if (afflicted &gt; current_max_afflicted)
    {
    stats_array[6,1] = afflicted;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_save</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>300</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dps calculations

if DPS &lt;=60 and DPS &gt; 0
{
alarm[0] = round(60/DPS);
obj_control.insanity +=1;
obj_control.population -=1;
obj_control.afflicted +=1;
obj_control.stats_array[0,1] = real(obj_control.stats_array[0,1]) + 1; //add to total damage - lachlan
}
else
{
alarm[0] = 1;
obj_control.insanity +=ceil(DPS/60);
obj_control.population -=ceil(DPS/60);
obj_control.afflicted +=ceil(DPS/60);
obj_control.stats_array[0,1] = real(obj_control.stats_array[0,1]) + ceil(DPS/60); //add to total damage - lachlan
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check is the game has been minimised
//lachlan

if os_is_paused()
    {
    alarm [4] = 1
    scr_save();
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for UI Interaction
if (obj_store_control.dragoverwrite = 0) //if not currently scrolling through store
{
/*
        //Check UI Arrows
    //Check inside verticle bounds
    if (mouse_y &gt; (ui_arrow_top) &amp;&amp; mouse_y &lt; (ui_arrow_bottom)) {
        //Check leftmost arrow
        if (mouse_x &gt; (view_xview + ui_arrow_left_xpos) &amp;&amp; mouse_x &lt; (view_xview + ui_arrow_left_xpos + ui_arrow_width))
        {
            scr_view_instant_left();
        }
        //Check Rightmost arrow
        else if (mouse_x &gt; (view_xview + ui_arrow_right_xpos) &amp;&amp; mouse_x &lt; (view_xview + ui_arrow_right_xpos + ui_arrow_width))
        {
            scr_view_instant_right();
        }   
    }
*/
}

//Check for swipe
if (ui_swipe_start) {
    var tmp_swipe = mouse_x - ui_click_start;
    if (abs(tmp_swipe) &gt; drag_distance) {
        if (sign(tmp_swipe) = -1) {
            scr_view_instant_right();
        } else {
            scr_view_instant_left();
        }
    }
    ui_click_start = 0;
}
ui_swipe_start = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Swipe Checking
ui_click_start = mouse_x;
ui_swipe_start = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check responce and take nessisary action
//lachlan

//get responce
server_datetime = async_load[? "result"] ;
server_responce_code= async_load[? "http_status"]


//check that code is 200 a.k.a OK
if(server_responce_code = 200 &amp;&amp; server_datetime &gt; 1492918508)
{
    //make responce real
    server_datetime = real(server_datetime);

    //make global
    global.server_datetime = server_datetime;
    
    //set server connection true
    global.server_connection = 1;
    
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cityscape and backgrounds Draw
/* due to how game maker layers sprites the background must be
drawn first */

// Draw sky -------------------
draw_sprite_pos(spr_sky2, 0, 0, 0, view_wview*3, 0, view_wview*3, view_hview/2, 0, view_hview/2, 1);//changed to use new gradient sky, old one can be used with spr_sky - lachlan

// draw water overlay -------- lachlan !! commented out by Dean
//draw_sprite_pos(spr_water, 0, 0, view_hview/2,view_wview, view_hview/2,view_wview,view_hview, 0, view_hview, water_overlay)

/* Cityscape ------------------------
Draw the cityscape 
!!! This needs to be moved to it's own script imo, the monsters/city is a big element and will need its own controller - Harry
!!! moved - Dean */
draw_sprite_ext( spr_cityscape, 0, 0, view_hview/2, .5, .5, 0, c_white, 1 );

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the HUD
/* Try to keep the draw elements in order from top to bottom, left to right of the screen :) - Harry */

/* Calculate the HUD strings 
!!! Should be moved to step event instead of Draw*/
ui_insanity = "Insanity: " + string(insanity);
ui_population = "Population: " +string(population);
ui_afflicted = "Afflicted: " +string(afflicted);
ui_dps = "DPS: " +string(DPS);
viewoffset = view_wview * viewnum;

/*Draw the HUD Elements */
/*Economy ------------------------ 
Draw the economy HUD at the top of the screen*/
ui_entityWidth = string_width(ui_insanity) *global.font_size;
draw_text_transformed(bOffset + viewoffset, bOffset,ui_insanity,global.font_size,global.font_size,0);

ui_entityHeight = string_height_ext(ui_insanity, tOffset, -1)*global.font_size + zoom; //Get string width of population entity to properly accurately y position
draw_text_transformed(bOffset + viewoffset, bOffset + ui_entityHeight, ui_dps,global.font_size,global.font_size,0);

ui_entityWidth = string_width(ui_population) *global.font_size; //Get string width in order to accurately x position
draw_text_transformed(display_right - bOffset - ui_entityWidth + viewoffset,bOffset, ui_population,global.font_size,global.font_size,0); //draw the population value

ui_entityWidth = string_width(ui_afflicted) *global.font_size; //Get string width in order to accurately x position
ui_entityHeight = string_height_ext(ui_population, tOffset, -1) *global.font_size + zoom; //Get string width of population entity to properly accurately y position
draw_text_transformed(display_right - bOffset - ui_entityWidth + viewoffset, bOffset + ui_entityHeight, ui_afflicted,global.font_size,global.font_size,0); //draw the afflicted value


/* View Move Arrows ------------------------ 
Draw the view move arrows 
if (viewnum != index_minView) {
    draw_sprite(spr_arrow, 0, view_xview + ui_arrow_left_xpos, ui_arrow_ypos);
}
if (viewnum != index_maxView) {
    draw_sprite(spr_arrow, 1, view_xview + ui_arrow_right_xpos, ui_arrow_ypos);
}

/* View Dot Indicator ------------------------ 
Draw indicators of the views at the bottom of the screen *
draw_set_alpha(0.6);
for (i = 0; i &lt; view_count; i++) {
    if (i-abs(index_minView) = viewnum) {
        draw_sprite(spr_dot, 0, dots_pos_start + (i*dot_plus_offset_width) + view_xview, view_hview-38);
    } else {
        draw_sprite(spr_dot, 1, dots_pos_start + (i*dot_plus_offset_width) + view_xview, view_hview-38);
    }
}
draw_set_alpha(1); //return opactiy to default */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_view_instant_right</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_view_instant_left</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
