<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_control</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resolution Management striped for loading screen

            width = 620;
            height = 840;

//get os and get screen resolution
switch (os_type)
    {
    case os_windows: var screen_height = height; var screen_width = width; break;
    case os_android: var screen_height = display_get_height(); var screen_width = display_get_width(); break;
    case os_linux: var screen_height = height; var screen_width = width; break;
    case os_macosx: var screen_height = height; var screen_width = width; break;
    case os_ios: var screen_height = display_get_height(); var screen_width = display_get_width(); break;
    case os_winphone: var screen_height = display_get_height(); var screen_width = display_get_width(); break;
    case os_unknown: var screen_height = height; var screen_width = width; break;
    }
window_set_position(32, 32);

/*  DONT CHANGE    */
surface_resize(application_surface,screen_width,screen_height); //resizes the surface to the resolution
window_set_size(screen_width,screen_height); //resizes the window to the resolution
view_wview = screen_width;  //resizes the view to the resolution
view_hview = screen_height;


//create instances in porportion to the view
display_center = view_hview/2; //the y coordinate at which the botton of the city image starts
display_right = view_wview; //the y coordinate of window right side
display_025= view_wview/4; //one quarter of screen width

//zoom variables
zoom_loading = round(view_wview/(sprite_get_width(spr_loading) * 2));
zoom_icon = round(view_wview/(sprite_get_width(spr_loading_icon) * 7));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set network settings
//lachlan

//server connection variable
global.server_connection = 0;

//set default time out time
network_set_config(network_config_connect_timeout,6000);

//set game maker to not block
network_set_config(network_config_use_non_blocking_socket, 1);

//network connect attempts
attempt_max = 3;
attempt = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_get_server_time</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spawn loading screen objects
//lachlan
//draw backgrond sprite
draw_sprite_pos(spr_loading_background, 0, 0, 0, view_wview, 0, view_wview, view_hview, 0, view_hview, 1);

//draw and scale loading screen objects
Loading_backgroundID = instance_create(0,0 ,obj_loading_background)
Loading_textID = instance_create((view_wview/2),view_hview*1/3 ,obj_loading_text)
Loading_iconID = instance_create((view_wview/2),view_hview*3/4 ,obj_loading_bar)


with (obj_loading_background)
    {
    image_xscale = (image_xscale/sprite_get_width(spr_loading_background))* view_wview;
    image_yscale = (image_yscale/sprite_get_width(spr_loading_background))* view_hview;
    }
with (obj_loading_text)
    {
    image_xscale = other.zoom_loading;
    image_yscale = other.zoom_loading;
    }
    
with (obj_loading_bar)
    {
    image_xscale = other.zoom_icon;
    image_yscale = other.zoom_icon;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check responce and take nessisary action
//lachlan

//get responce
server_datetime = async_load[? "result"] ;
server_responce_code= async_load[? "http_status"]

//make responce real
server_datetime = real(server_datetime);

//check that code is 200 a.k.a OK
if(server_responce_code = 200 &amp;&amp; server_datetime &gt; 1492918508)
{
    
    //make global
    global.server_datetime = server_datetime;
    
    //set server connection true
    global.server_connection = 1;
    
    //goto main room
    room_goto(rm_main);
}
else
{
    //check attempt number
    attempt = attempt + 1;

    if (attempt &lt;= attempt_max)
    {
        scr_get_server_time();
    }
    else
    {
        //max attemts made date time returns 0
        global.server_datetime = 0
        
        //set server connecttion false
        global.server_connection = 0;
    
        //goto main room
        room_goto(rm_main);
    }
    
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
