<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_clicker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 10
image_speed = 0.05;
image_xscale = obj_control.zoom;
image_yscale = obj_control.zoom;
ocean_image_index = 0;
// set humm variables ------------------
vol = 0;
tap = false;
// set sound levels --------------------
audio_sound_gain(snd_hum_placeholder, 0, 0);
audio_sound_gain(snd_tap_on, 0.02, 0);
audio_sound_gain(snd_tap_off, 0.02, 0);

// begin running humm sound ------------
audio_play_sound(snd_hum_placeholder, 5, true);

//define colors
c_ocean = make_color_rgb(45,131,152);
c_ocean_overlay_top = make_color_rgb(154,179,199);
c_ocean_overlay_bottom = make_color_rgb(48,34,60);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Clicker Particle System/s
scr_part_system_init(x+(sprite_width/2), y+(sprite_height/2)-25);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// this code runs every step

// adjust vol variable -----------
if vol &gt; 0 
{
vol = vol - 0.0045;
}

// adjust humm loudness ----------
audio_sound_gain(snd_hum_placeholder, vol, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 3;
if tap = true
{
audio_sound_pitch(snd_tap_off, 0.5 + random(1));
audio_play_sound(snd_tap_off,1,0)
tap = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tap
tap = true
obj_control.insanity +=obj_control.click_damage;
obj_control.population -=obj_control.click_damage;
obj_control.afflicted +=obj_control.click_damage;
image_index =1;

scr_part_Clicker(); //Emit Click Particle Effect

audio_sound_pitch(snd_tap_on, 0.5 + random(1));
audio_play_sound(snd_tap_on,1,0)
// add to humm loudness ------------- lachlan
vol = vol + 0.05;

// add to total click count - lachlan
current_total = real(obj_control.stats_array[3,1]);
obj_control.stats_array[3,1] = current_total  + 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw ocean

draw_set_color(c_ocean);
draw_rectangle(0,obj_control.display_center,view_wview*(obj_control.index_maxView+1),view_hview,0)

var temp1 = ceil((view_wview*(obj_control.index_maxView+1))/(32*obj_control.zoom));
var temp2 = ceil((view_hview)/(32*obj_control.zoom));
ocean_image_index += 0.1;
draw_self();
for(var i = 0; i&lt;=temp1; i++)
{
    for(var i2 = 0; i2&lt;=temp2; i2++)
    {
        draw_sprite_ext(spr_ocean_texture,ocean_image_index,i*32*obj_control.zoom,i2*32*obj_control.zoom,obj_control.zoom,obj_control.zoom,0,c_white,0.5);
    }

}
draw_sprite_ext(spr_ocean,0,0,obj_control.display_center,(view_wview*(obj_control.index_maxView+1))/sprite_get_width(spr_ocean),(view_hview-obj_control.display_center)/sprite_get_height(spr_ocean),0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Clear!!!!
scr_save_clear();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
