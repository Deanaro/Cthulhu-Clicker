<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_control</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///notes about creation
/*
object is created in obj_control under alarm 7
boss_array_position is passed when the object is created and equels the row the of the boss array that this bosses information is stored in.
*/
boss_array_position = 0;

x = view_wview * 6;
y = 0;

boss_focus = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///load boss variables

boss_name = obj_control.boss_array[boss_array_position,0];
boss_health = obj_control.boss_array[boss_array_position,1];
boss_time = obj_control.boss_array[boss_array_position,2];
boss_sprite = obj_control.boss_array[boss_array_position,7];


/* variables to track with */

//convert time to steps for time tracking
time_steps = boss_time * room_speed;

//set boss health
boss_current_health = boss_health;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spawn boss objects
//lachlan

test = view_wview * 6;

//boss icon 
instance_create (0,0,obj_boss_icon);

//boss
instance_create (obj_boss_event.x + (view_wview * 0.5),obj_boss_event.y + (view_hview * 0.5),obj_boss);

//back arrow
instance_create (obj_boss_event.x + (view_wview * 0.1),obj_boss_event.y + (view_hview * 0.1),obj_back);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///when the boss is defeated reset the nessisary variables and move player view
//lachlan

//set boss as defeated in array
obj_control.boss_array[boss_array_position,6] = 1;


//destroy boss icon
with (obj_boss_icon)
   {
    instance_destroy();
   }

//turn off active boss
obj_control.active_boss = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calculate steps left in time
time_steps = time_steps - 1;

if (time_steps &lt;= 0)
{
    //time is up
    //send user back to main screen
    view_xview = 0
    obj_control.x = 0
    global.view_lock = true;

    //set boss as unfocused
    obj_boss_event.boss_focus = 0
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if boss view is focused

//if unfocused reset variables
if (boss_focus = 0)
{
    //reset time 
    time_steps = boss_time * room_speed;
    
    //reset health
    boss_current_health = boss_health;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw variables and background
draw_sprite_pos(spr_boss_background, 0, obj_boss_event.x, 0, obj_boss_event.x + view_wview, 0, obj_boss_event.x + view_wview, view_hview, obj_boss_event.x, view_hview, 1);
draw_text((obj_boss_event.x+(view_wview * 0.25)),(obj_boss_event.y + (view_hview * 0.25)),string(boss_current_health));
draw_text((obj_boss_event.x+(view_wview * 0.75)),(obj_boss_event.y + (view_hview * 0.25)),string(time_steps / room_speed));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
